#nullable enable
abstract Avatars.Argument.RawValue.get -> object?
abstract Avatars.Argument.WithRawValue(object? rawValue) -> Avatars.Argument!
Avatars.AppliesToHandler
Avatars.Argument
Avatars.Argument.Argument(System.Reflection.ParameterInfo! parameter) -> void
Avatars.Argument.CheckValue(object? value) -> object?
Avatars.Argument.Name.get -> string!
Avatars.Argument.Parameter.get -> System.Reflection.ParameterInfo!
Avatars.Argument.Parameter.init -> void
Avatars.Argument<T>
Avatars.Argument<T>.Argument(System.Reflection.ParameterInfo! parameter, T? value) -> void
Avatars.Argument<T>.Value.get -> T?
Avatars.Argument<T>.Value.init -> void
Avatars.Argument<T>.WithValue(T? value) -> Avatars.Argument<T>!
Avatars.ArgumentCollection
Avatars.ArgumentCollection.Add<T>(int index, T? value) -> void
Avatars.ArgumentCollection.Add<T>(string! name, T? value) -> void
Avatars.ArgumentCollection.ArgumentCollection(params Avatars.Argument![]! arguments) -> void
Avatars.ArgumentCollection.ArgumentCollection(System.Reflection.ParameterInfo![]! parameters) -> void
Avatars.ArgumentCollection.Contains(string! name) -> bool
Avatars.ArgumentCollection.Count.get -> int
Avatars.ArgumentCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<Avatars.Argument!>!
Avatars.ArgumentCollection.GetValue(int index) -> object?
Avatars.ArgumentCollection.GetValue(string! name) -> object?
Avatars.ArgumentCollection.Parameters.get -> System.Reflection.ParameterInfo![]!
Avatars.ArgumentCollection.SetValue(int index, object? value) -> Avatars.IArgumentCollection!
Avatars.ArgumentCollection.SetValue(string! name, object? value) -> Avatars.IArgumentCollection!
Avatars.ArgumentCollection.this[int index].get -> Avatars.Argument!
Avatars.ArgumentCollection.this[string! name].get -> Avatars.Argument!
Avatars.ArgumentCollection.this[string! name].set -> void
Avatars.ArgumentCollectionExtensions
Avatars.AvatarExtensions
Avatars.AvatarFactory
Avatars.AvatarFactory.CreateAvatar(System.Reflection.Assembly! assembly, System.Type! baseType, System.Type![]! implementedInterfaces, object?[]! constructorArguments) -> object!
Avatars.AvatarGeneratorAttribute
Avatars.AvatarGeneratorAttribute.AvatarGeneratorAttribute() -> void
Avatars.AvatarNaming
Avatars.BehaviorPipeline
Avatars.BehaviorPipeline.BehaviorPipeline() -> void
Avatars.BehaviorPipeline.BehaviorPipeline(params Avatars.ExecuteHandler![]! behaviors) -> void
Avatars.BehaviorPipeline.BehaviorPipeline(params Avatars.IAvatarBehavior![]! behaviors) -> void
Avatars.BehaviorPipeline.BehaviorPipeline(System.Collections.Generic.IEnumerable<Avatars.ExecuteHandler!>! behaviors) -> void
Avatars.BehaviorPipeline.BehaviorPipeline(System.Collections.Generic.IEnumerable<Avatars.IAvatarBehavior!>! behaviors) -> void
Avatars.BehaviorPipeline.Behaviors.get -> System.Collections.Generic.IList<Avatars.IAvatarBehavior!>!
Avatars.BehaviorPipeline.Invoke(Avatars.IMethodInvocation! invocation, bool throwOnException = false) -> Avatars.IMethodReturn!
Avatars.BehaviorPipelineExtensions
Avatars.BehaviorPipelineFactory
Avatars.DefaultEqualityBehavior
Avatars.DefaultEqualityBehavior.AppliesTo(Avatars.IMethodInvocation! invocation) -> bool
Avatars.DefaultEqualityBehavior.DefaultEqualityBehavior() -> void
Avatars.DefaultEqualityBehavior.Execute(Avatars.IMethodInvocation! invocation, Avatars.ExecuteHandler! next) -> Avatars.IMethodReturn!
Avatars.DefaultValueBehavior
Avatars.DefaultValueBehavior.AppliesTo(Avatars.IMethodInvocation! invocation) -> bool
Avatars.DefaultValueBehavior.DefaultValueBehavior() -> void
Avatars.DefaultValueBehavior.DefaultValueBehavior(Avatars.DefaultValueProvider! provider) -> void
Avatars.DefaultValueBehavior.Provider.get -> Avatars.DefaultValueProvider!
Avatars.DefaultValueBehavior.Provider.set -> void
Avatars.DefaultValueProvider
Avatars.DefaultValueProvider.DefaultValueProvider(bool registerDefaults = true) -> void
Avatars.DefaultValueProvider.Deregister(System.Type! key) -> bool
Avatars.DefaultValueProvider.Deregister<T>() -> bool
Avatars.DefaultValueProvider.GetDefault(System.Type! type) -> object?
Avatars.DefaultValueProvider.GetDefault<T>() -> T?
Avatars.DefaultValueProvider.Register(System.Type! key, System.Func<System.Type!, object!>! factory) -> void
Avatars.DefaultValueProvider.Register<T>(System.Func<T>! factory) -> void
Avatars.ExecuteHandler
Avatars.IArgumentCollection
Avatars.IArgumentCollection.Contains(string! name) -> bool
Avatars.IArgumentCollection.GetValue(int index) -> object?
Avatars.IArgumentCollection.GetValue(string! name) -> object?
Avatars.IArgumentCollection.SetValue(int index, object? value) -> Avatars.IArgumentCollection!
Avatars.IArgumentCollection.SetValue(string! name, object? value) -> Avatars.IArgumentCollection!
Avatars.IArgumentCollection.this[string! name].get -> Avatars.Argument!
Avatars.IArgumentCollection.this[string! name].set -> void
Avatars.IAvatar
Avatars.IAvatar.Behaviors.get -> System.Collections.Generic.IList<Avatars.IAvatarBehavior!>!
Avatars.IAvatarBehavior
Avatars.IAvatarBehavior.AppliesTo(Avatars.IMethodInvocation! invocation) -> bool
Avatars.IAvatarBehavior.Execute(Avatars.IMethodInvocation! invocation, Avatars.ExecuteHandler! next) -> Avatars.IMethodReturn!
Avatars.IAvatarFactory
Avatars.IAvatarFactory.CreateAvatar(System.Reflection.Assembly! assembly, System.Type! baseType, System.Type![]! implementedInterfaces, object?[]! constructorArguments) -> object!
Avatars.IBehaviorPipelineFactory
Avatars.IBehaviorPipelineFactory.CreatePipeline<TAvatar>() -> Avatars.BehaviorPipeline!
Avatars.IMethodInvocation
Avatars.IMethodInvocation.Arguments.get -> Avatars.IArgumentCollection!
Avatars.IMethodInvocation.Context.get -> System.Collections.Generic.IDictionary<string!, object!>!
Avatars.IMethodInvocation.CreateCallBaseReturn(Avatars.IArgumentCollection? arguments = null) -> Avatars.IMethodReturn!
Avatars.IMethodInvocation.CreateExceptionReturn(System.Exception! exception) -> Avatars.IMethodReturn!
Avatars.IMethodInvocation.CreateValueReturn(object? returnValue, Avatars.IArgumentCollection! arguments) -> Avatars.IMethodReturn!
Avatars.IMethodInvocation.MethodBase.get -> System.Reflection.MethodBase!
Avatars.IMethodInvocation.SkipBehaviors.get -> System.Collections.Generic.HashSet<System.Type!>!
Avatars.IMethodInvocation.SupportsCallBase.get -> bool
Avatars.IMethodInvocation.Target.get -> object!
Avatars.IMethodReturn
Avatars.IMethodReturn.Context.get -> System.Collections.Generic.IDictionary<string!, object!>!
Avatars.IMethodReturn.Exception.get -> System.Exception?
Avatars.IMethodReturn.Outputs.get -> Avatars.IArgumentCollection!
Avatars.IMethodReturn.ReturnValue.get -> object?
Avatars.MethodInvocation
Avatars.MethodInvocation.Arguments.get -> Avatars.IArgumentCollection!
Avatars.MethodInvocation.Context.get -> System.Collections.Generic.IDictionary<string!, object!>!
Avatars.MethodInvocation.CreateCallBaseReturn(Avatars.IArgumentCollection? arguments = null) -> Avatars.IMethodReturn!
Avatars.MethodInvocation.CreateExceptionReturn(System.Exception! exception) -> Avatars.IMethodReturn!
Avatars.MethodInvocation.CreateValueReturn(object? returnValue, Avatars.IArgumentCollection! arguments) -> Avatars.IMethodReturn!
Avatars.MethodInvocation.Equals(Avatars.IMethodInvocation? other) -> bool
Avatars.MethodInvocation.Equals(Avatars.MethodInvocation! other) -> bool
Avatars.MethodInvocation.MethodBase.get -> System.Reflection.MethodBase!
Avatars.MethodInvocation.MethodInvocation(object! target, System.Reflection.MethodBase! method) -> void
Avatars.MethodInvocation.MethodInvocation(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase) -> void
Avatars.MethodInvocation.MethodInvocation(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, Avatars.IArgumentCollection! arguments) -> void
Avatars.MethodInvocation.MethodInvocation(object! target, System.Reflection.MethodBase! method, Avatars.IArgumentCollection! arguments) -> void
Avatars.MethodInvocation.SkipBehaviors.get -> System.Collections.Generic.HashSet<System.Type!>!
Avatars.MethodInvocation.SupportsCallBase.get -> bool
Avatars.MethodInvocation.Target.get -> object!
Avatars.MethodInvocationExtensions
Avatars.MethodReturn
Avatars.MethodReturn.Context.get -> System.Collections.Generic.IDictionary<string!, object!>!
Avatars.MethodReturn.Exception.get -> System.Exception?
Avatars.MethodReturn.Exception.init -> void
Avatars.MethodReturn.MethodReturn(Avatars.IMethodInvocation! invocation, object? returnValue, Avatars.IArgumentCollection! arguments) -> void
Avatars.MethodReturn.MethodReturn(Avatars.IMethodInvocation! invocation, System.Exception! exception) -> void
Avatars.MethodReturn.Outputs.get -> Avatars.IArgumentCollection!
Avatars.MethodReturn.Outputs.init -> void
Avatars.MethodReturn.ReturnValue.get -> object?
Avatars.MethodReturn.ReturnValue.init -> void
Avatars.MethodReturnExtensions
Avatars.ObjectArgument
Avatars.ObjectArgument.ObjectArgument(System.Reflection.ParameterInfo! parameter, object? value) -> void
Avatars.RecordingBehavior
Avatars.RecordingBehavior.AppliesTo(Avatars.IMethodInvocation! invocation) -> bool
Avatars.RecordingBehavior.Execute(Avatars.IMethodInvocation! invocation, Avatars.ExecuteHandler! next) -> Avatars.IMethodReturn!
Avatars.RecordingBehavior.Invocations.get -> System.Collections.Generic.List<Avatars.RecordingBehavior.RecordedInvocation!>!
Avatars.RecordingBehavior.RecordedInvocation
Avatars.RecordingBehavior.RecordedInvocation.Invocation.get -> Avatars.IMethodInvocation!
Avatars.RecordingBehavior.RecordedInvocation.RecordedInvocation(Avatars.IMethodInvocation! invocation, Avatars.IMethodReturn! return) -> void
Avatars.RecordingBehavior.RecordedInvocation.Return.get -> Avatars.IMethodReturn!
Avatars.RecordingBehavior.RecordingBehavior() -> void
Avatars.Ref
Avatars.Ref.Ref() -> void
Avatars.Ref<T>
Avatars.Ref<T>.Ref(T? value) -> void
Avatars.Ref<T>.Value.get -> T?
Avatars.StaticAvatarFactory
Avatars.StaticAvatarFactory.CreateAvatar(System.Reflection.Assembly! assembly, System.Type! baseType, System.Type![]! implementedInterfaces, object?[]! constructorArguments) -> object!
Avatars.StaticAvatarFactory.StaticAvatarFactory() -> void
const Avatars.AvatarNaming.DefaultRootNamespace = "Avatars" -> string!
const Avatars.AvatarNaming.DefaultSuffix = "Avatar" -> string!
override Avatars.Argument<T>.RawValue.get -> object?
override Avatars.Argument<T>.ToString() -> string!
override Avatars.Argument<T>.WithRawValue(object? rawValue) -> Avatars.Argument!
override Avatars.ArgumentCollection.Equals(object! obj) -> bool
override Avatars.ArgumentCollection.GetHashCode() -> int
override Avatars.ArgumentCollection.ToString() -> string!
override Avatars.MethodInvocation.Equals(object! obj) -> bool
override Avatars.MethodInvocation.GetHashCode() -> int
override Avatars.MethodInvocation.ToString() -> string!
override Avatars.MethodReturn.ToString() -> string!
override Avatars.ObjectArgument.RawValue.get -> object?
override Avatars.ObjectArgument.WithRawValue(object? rawValue) -> Avatars.Argument!
override Avatars.RecordingBehavior.RecordedInvocation.ToString() -> string!
override Avatars.RecordingBehavior.ToString() -> string!
static Avatars.Argument.Create<T>(System.Reflection.ParameterInfo! info, T value) -> Avatars.Argument<T>!
static Avatars.Argument<T>.implicit operator T?(Avatars.Argument<T>! argument) -> T?
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7, T8>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6, T7>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5, T6>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4, T5>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3, T4>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3, T4 arg4) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2, T3>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2, T3 arg3) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T1, T2>(System.Reflection.ParameterInfo![]! parameters, T1 arg1, T2 arg2) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollection.Create<T>(System.Reflection.ParameterInfo![]! parameters, T arg) -> Avatars.ArgumentCollection!
static Avatars.ArgumentCollectionExtensions.Get<T>(this Avatars.IArgumentCollection! arguments, int index) -> T
static Avatars.ArgumentCollectionExtensions.Get<T>(this Avatars.IArgumentCollection! arguments, string! name) -> T
static Avatars.ArgumentCollectionExtensions.GetNullable<T>(this Avatars.IArgumentCollection! arguments, int index) -> T?
static Avatars.ArgumentCollectionExtensions.GetNullable<T>(this Avatars.IArgumentCollection! arguments, string! name) -> T?
static Avatars.ArgumentCollectionExtensions.Set<T>(this Avatars.IArgumentCollection! arguments, int index, T value) -> Avatars.IArgumentCollection!
static Avatars.ArgumentCollectionExtensions.Set<T>(this Avatars.IArgumentCollection! arguments, string! name, T value) -> Avatars.IArgumentCollection!
static Avatars.AvatarExtensions.AddBehavior(this Avatars.IAvatar! avatar, Avatars.ExecuteHandler! behavior, Avatars.AppliesToHandler? appliesTo = null, string? name = null) -> Avatars.IAvatar!
static Avatars.AvatarExtensions.AddBehavior(this Avatars.IAvatar! avatar, Avatars.IAvatarBehavior! behavior) -> Avatars.IAvatar!
static Avatars.AvatarExtensions.AddBehavior<TAvatar>(this TAvatar avatar, Avatars.ExecuteHandler! behavior, Avatars.AppliesToHandler? appliesTo = null, string? name = null) -> TAvatar
static Avatars.AvatarExtensions.AddBehavior<TAvatar>(this TAvatar avatar, Avatars.IAvatarBehavior! behavior) -> TAvatar
static Avatars.AvatarExtensions.InsertBehavior(this Avatars.IAvatar! avatar, int index, Avatars.ExecuteHandler! behavior, Avatars.AppliesToHandler? appliesTo = null, string? name = null) -> Avatars.IAvatar!
static Avatars.AvatarExtensions.InsertBehavior(this Avatars.IAvatar! avatar, int index, Avatars.IAvatarBehavior! behavior) -> Avatars.IAvatar!
static Avatars.AvatarExtensions.InsertBehavior<TAvatar>(this TAvatar avatar, int index, Avatars.ExecuteHandler! behavior, Avatars.AppliesToHandler? appliesTo = null, string? name = null) -> TAvatar
static Avatars.AvatarExtensions.InsertBehavior<TAvatar>(this TAvatar avatar, int index, Avatars.IAvatarBehavior! behavior) -> TAvatar
static Avatars.AvatarFactory.Default.get -> Avatars.IAvatarFactory!
static Avatars.AvatarFactory.Default.set -> void
static Avatars.AvatarFactory.LocalDefault.get -> Avatars.IAvatarFactory?
static Avatars.AvatarFactory.LocalDefault.set -> void
static Avatars.AvatarFactory.NotImplemented.get -> Avatars.IAvatarFactory!
static Avatars.AvatarNaming.GetFullName(string! namespace, System.Type! baseType, params System.Type![]! additionalInterfaces) -> string!
static Avatars.AvatarNaming.GetFullName(string! rootNamespace, string! suffix, System.Type! baseType, params System.Type![]! additionalInterfaces) -> string!
static Avatars.AvatarNaming.GetFullName(System.Type! baseType, params System.Type![]! additionalInterfaces) -> string!
static Avatars.AvatarNaming.GetName(string! suffix, System.Type! baseType, params System.Type![]! additionalInterfaces) -> string!
static Avatars.AvatarNaming.GetName(System.Type! baseType, params System.Type![]! additionalInterfaces) -> string!
static Avatars.BehaviorPipelineExtensions.Execute(this Avatars.BehaviorPipeline! pipeline, Avatars.IMethodInvocation! invocation) -> Avatars.IMethodReturn!
static Avatars.BehaviorPipelineExtensions.Execute<T>(this Avatars.BehaviorPipeline! pipeline, Avatars.IMethodInvocation! invocation) -> T?
static Avatars.BehaviorPipelineExtensions.ExecuteRef<T>(this Avatars.BehaviorPipeline! pipeline, Avatars.IMethodInvocation! invocation) -> Avatars.Ref<T>!
static Avatars.BehaviorPipelineFactory.Default.get -> Avatars.IBehaviorPipelineFactory!
static Avatars.BehaviorPipelineFactory.Default.set -> void
static Avatars.BehaviorPipelineFactory.LocalDefault.get -> Avatars.IBehaviorPipelineFactory?
static Avatars.BehaviorPipelineFactory.LocalDefault.set -> void
static Avatars.MethodInvocation.Create(object! target, System.Reflection.MethodBase! method) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8, T9>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7, T8>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6, T7>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5, T6>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4, T5>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3, T4 arg4) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3, T4>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3, T4 arg4) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2, T3 arg3) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2, T3>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2, T3 arg3) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T1 arg1, T2 arg2) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T1, T2>(object! target, System.Reflection.MethodBase! method, T1 arg1, T2 arg2) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T>(object! target, System.Reflection.MethodBase! method, Avatars.ExecuteHandler! callBase, T arg) -> Avatars.MethodInvocation!
static Avatars.MethodInvocation.Create<T>(object! target, System.Reflection.MethodBase! method, T arg) -> Avatars.MethodInvocation!
static Avatars.MethodInvocationExtensions.CreateReturn(this Avatars.IMethodInvocation! invocation) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7, T8>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6, T7>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5, T6>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4, T5>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3, T4>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3, T4 arg4) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2, T3>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2, T3 arg3) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T1, T2>(this Avatars.IMethodInvocation! invocation, T1 arg1, T2 arg2) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateReturn<T>(this Avatars.IMethodInvocation! invocation, T arg) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8, T9>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7, T8>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6, T7>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5, T6>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4, T5>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3, T4>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3, T4 arg4) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2, T3>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2, T3 arg3) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T1, T2>(this Avatars.IMethodInvocation! invocation, TResult result, T1 arg1, T2 arg2) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult, T>(this Avatars.IMethodInvocation! invocation, TResult result, T arg) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.CreateValueReturn<TResult>(this Avatars.IMethodInvocation! invocation, TResult result) -> Avatars.IMethodReturn!
static Avatars.MethodInvocationExtensions.SkipBehavior<TBehavior>(this Avatars.IMethodInvocation! invocation) -> void
static Avatars.MethodReturnExtensions.AsRef<T>(this Avatars.IMethodReturn! return) -> Avatars.Ref<T>!
static Avatars.Ref.Create(System.Type! type, object? value) -> object!
static Avatars.Ref.Create<T>(T value) -> Avatars.Ref<T>!
static Avatars.Ref<T>.implicit operator Avatars.Ref<T>!(T? value) -> Avatars.Ref<T>!
static Avatars.Ref<T>.implicit operator T?(Avatars.Ref<T>! ref) -> T?
virtual Avatars.DefaultValueProvider.GetFallbackDefaultValue(System.Type! type) -> object?