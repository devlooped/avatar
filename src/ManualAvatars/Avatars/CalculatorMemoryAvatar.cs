//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS8600, CS8601, CS8602, CS8603, CS8604, CS8605, CS8618, CS8625, CS8765
using Avatars;
using Sample;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace Avatars.Sample
{
    [CompilerGenerated]
    partial class CalculatorMemoryAvatar : CalculatorMemory, IAvatar
    {
        readonly BehaviorPipeline pipeline = BehaviorPipelineFactory.Default.CreatePipeline<CalculatorMemoryAvatar>();

        [CompilerGenerated]
        public CalculatorMemoryAvatar() => pipeline.Execute(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) => m.CreateReturn()));

        [CompilerGenerated]
        IList<IAvatarBehavior> IAvatar.Behaviors => pipeline.Behaviors;

        [CompilerGenerated]
        public override void Add(int value) => pipeline.Execute(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) =>
        {
            base.Add(value);
            return m.CreateReturn();
        }, value));

        [CompilerGenerated]
        public override void Clear() => pipeline.Execute(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) =>
        {
            base.Clear();
            return m.CreateReturn();
        }));

        [CompilerGenerated]
        public override bool Equals(object obj) => pipeline.Execute<bool>(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) => m.CreateValueReturn(base.Equals(obj)), obj));

        [CompilerGenerated]
        public override int GetHashCode() => pipeline.Execute<int>(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) => m.CreateValueReturn(base.GetHashCode())));

        [CompilerGenerated]
        public override int? Recall() => pipeline.Execute<int?>(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) => m.CreateValueReturn(base.Recall())));

        [CompilerGenerated]
        public override void Subtract(int value) => pipeline.Execute(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) =>
        {
            base.Subtract(value);
            return m.CreateReturn();
        }, value));

        [CompilerGenerated]
        public override string ToString() => pipeline.Execute<string>(MethodInvocation.Create(this, MethodBase.GetCurrentMethod(), (m, n) => m.CreateValueReturn(base.ToString())));

    }
}