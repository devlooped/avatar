name: build
on: 
  push:
    branches: [ main, dev, 'feature/*', 'rel/*' ]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  DOTNET_NOLOGO: true
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

defaults:
  run:
    shell: bash

jobs:
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2
      - name: ⚙ dotnet 5.0 rc2
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100-rc.2.20479.15
      - name: ❱❱ format
        run: |
          dotnet tool update -g --version 4.1.* dotnet-format >nul || dotnet tool list -g
          dotnet format -f --check -v:diag
      - name: 🙏 build
        run: dotnet msbuild -r -m:1 -bl:build.binlog -p:versionsuffix="$GITHUB_REF.$GITHUB_RUN_NUMBER"
      - name: 🧪 test net5.0
        run: dotnet test --no-build -f net5.0 -m:1 --blame-hang --blame-hang-timeout 5m -d $GITHUB_WORKSPACE/logs/${{ matrix.os }}.net5.txt -r $GITHUB_WORKSPACE/logs
        working-directory: src/Avatar.UnitTests
      - name: 🧪 test net472
        run: dotnet test --no-build -f net472 -m:1 --blame-hang --blame-hang-timeout 5m -d $GITHUB_WORKSPACE/logs/${{ matrix.os }}.net472.txt -r $GITHUB_WORKSPACE/logs
        working-directory: src/Avatar.UnitTests
        if: matrix.os == 'windows-latest'
      - name: 📦 pack
        run: dotnet msbuild -t:pack -m:1 -bl:pack.binlog -p:versionsuffix="$GITHUB_REF.$GITHUB_RUN_NUMBER"
        working-directory: src/Pack
      - name: 🔼 logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: |
            *.binlog
            logs/**/*.*
      - name: 🔼 packages
        uses: actions/upload-artifact@v2
        with:
          name: bin
          path: bin/*.nupkg

  acceptance:
    name: acceptance-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2
      - name: 🔽 packages
        uses: actions/download-artifact@v2
        with:
          name: bin
          path: bin
      - name: ⚙ dotnet 5.0 rc2
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.100-rc.2.20479.15
      - name: 🧪 test
        run: dotnet test -p:versionsuffix="$GITHUB_REF.$GITHUB_RUN_NUMBER"
        working-directory: src/Acceptance

  push:
    name: push nuget.ci
    runs-on: ubuntu-latest
    needs: [build, acceptance]
    if: ${{ !github.event.pull_request.head.repo.fork }}
    steps:
      - name: 🔽 packages
        uses: actions/download-artifact@v2
        with:
          name: bin
          path: bin
      - name: ⚙ dotnet 2.1.x
        uses: actions/setup-dotnet@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          dotnet-version: 2.1.x
      - name: 🚀 sleet
        run: |
          dotnet tool install -g --version 3.2.0 sleet 
          sleet push bin --config none -f --verbose -p "SLEET_FEED_CONTAINER=nuget" -p "SLEET_FEED_CONNECTIONSTRING=${{ secrets.SLEET_CONNECTION }}" -p "SLEET_FEED_TYPE=azure"